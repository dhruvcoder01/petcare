import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { Address, ShopService, Vet, Pet } from '../../services/shop.service'; // Assuming Pet model is needed for the booking dropdown
import { MapComponent } from '../../components/map/map.component'; 
import { VetCardComponent } from '../../components/vet-card/vet-card.component'; 
import { ChatbotComponent } from '../../components/chatbot/chatbot.component';

// --- New Data Models for Appointment Booking ---
interface AppointmentForm {
  petName: string;
  date: string; // datetime-local format: YYYY-MM-DDTHH:mm
  reason: string;
}

@Component({
Â  selector: 'app-vets-page',
Â  standalone: true,
Â  imports: [CommonModule, FormsModule, MapComponent, VetCardComponent,ChatbotComponent], 
Â  templateUrl: './vets-page.component.html',
Â  styleUrls: ['./vets-page.component.scss']
})
export class VetsPageComponent implements OnInit {
Â  // --- Dashboard/Sidebar State ---
Â  sidebarCollapsed = false;
Â  activeExternalRoute = 'vets'; 

Â  // --- Vets Page State ---
Â  loading = true;
Â  vets: Vet[] = [];
Â  filteredVets: Vet[] = [];
  pets: Pet[] = []; // ðŸ”‘ Need pets array for the booking modal dropdown
Â  
Â  defaultAddress!: Address | undefined;
Â  currentLocationQuery = '';
Â  currentRadius = 5; 
Â  useGeolocation = false; 
Â  
Â  mapCenter = { lat: 28.7041, lng: 77.1025 }; // Default Delhi coordinates
Â  selectedVet: Vet | null = null;
Â  
Â  openNowFilter = false;
Â  minRating = 4;
  
  // ðŸ”‘ Appointment Booking Modal State
  showBookingModal = false;
  newAppointment: AppointmentForm = this.getInitialAppointmentForm();
  // End of Appointment Booking Modal State

Â  constructor(private shopService: ShopService, private router: Router) {}

Â  ngOnInit(): void {
    // ðŸ”‘ Load pets needed for the appointment form dropdown
    this.pets = this.shopService.getPets();
    if (this.pets.length > 0) {
        this.newAppointment.petName = this.pets[0].name;
    }
    
Â  Â  this.loadVetsOnPageLoad();
Â  }

  // ðŸ”‘ Helper function for initial appointment form state
  getInitialAppointmentForm(): AppointmentForm {
      const now = new Date();
      now.setMinutes(now.getMinutes() - now.getMinutes() % 15); // Round to nearest 15 min
      const formattedDateTime = now.toISOString().substring(0, 16); // YYYY-MM-DDTHH:mm
      
      return {
          petName: this.pets[0]?.name || '',
          date: formattedDateTime,
          reason: ''
      };
  }
  
Â  // --- Initial Loading ---
Â  async loadVetsOnPageLoad(): Promise<void> {
Â  Â  this.loading = true;
Â  Â  // 1. Fetch default address from service (using await for simulated backend fetch)
Â  Â  this.defaultAddress = await this.shopService.getDefaultAddress();
Â  Â  
Â  Â  if (this.defaultAddress) {
Â  Â  Â  // Use Profile Address as starting location
Â  Â  Â  this.currentLocationQuery = `${this.defaultAddress.street}, ${this.defaultAddress.city}`;
Â  Â  Â  this.mapCenter = { lat: this.defaultAddress.latitude, lng: this.defaultAddress.longitude };
Â  Â  Â  await this.searchVetsByQuery(this.currentLocationQuery);
Â  Â  } else {
Â  Â  Â  // Fallback to Geolocation if no profile address is set
Â  Â  Â  this.getUserCurrentLocation();
Â  Â  }
Â  }
Â  
Â  // --- Geolocation (Current Location by Browser) ---
Â  getUserCurrentLocation(): void {
Â  Â  Â  this.loading = true;
Â  Â  Â  this.useGeolocation = true;
Â  Â  Â  this.currentLocationQuery = 'Fetching precise location...';

Â  Â  Â  if (navigator.geolocation) {
Â  Â  Â  Â  Â  navigator.geolocation.getCurrentPosition(
Â  Â  Â  Â  Â  Â  Â  // Success Callback
Â  Â  Â  Â  Â  Â  Â  (position) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  this.mapCenter = {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lat: position.coords.latitude,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lng: position.coords.longitude
Â  Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  Â  Â  Â  this.currentLocationQuery = 'Current Device Location (approx)';
Â  Â  Â  Â  Â  Â  Â  Â  Â  // Search using the coordinates (real API scenario)
Â  Â  Â  Â  Â  Â  Â  Â  Â  this.searchVetsByQuery(`Lat: ${this.mapCenter.lat}, Lng: ${this.mapCenter.lng}`); 
Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  // Error Callback (Handles denial or failure to obtain fix)
Â  Â  Â  Â  Â  Â  Â  (error) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  this.loading = false; 
Â  Â  Â  Â  Â  Â  Â  Â  Â  this.useGeolocation = false; 
Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  let message = 'Location access denied or timed out.';
Â  Â  Â  Â  Â  Â  Â  Â  Â  if (error.code === 2) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  message = 'Location signal unavailable (Error 2). Please use the search bar.';
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  this.currentLocationQuery = 'Search required due to error: ' + message;
Â  Â  Â  Â  Â  Â  Â  Â  Â  this.searchVetsByQuery('Delhi, India'); // Fallback search
Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
Â  Â  Â  Â  Â  );
Â  Â  Â  } else {
Â  Â  Â  Â  Â  this.loading = false;
Â  Â  Â  Â  Â  this.useGeolocation = false;
Â  Â  Â  Â  Â  this.currentLocationQuery = 'Geolocation Unsupported. Please use the search bar.';
Â  Â  Â  Â  Â  this.searchVetsByQuery('Delhi, India');
Â  Â  Â  }
Â  }
Â  
Â  // --- Search Logic (Manual Query or Geolocation Result) ---
Â  async searchVetsByQuery(query: string, radius: number = this.currentRadius): Promise<void> {
Â  Â  this.loading = true;
Â  Â  this.selectedVet = null;
Â  Â  this.currentLocationQuery = query;
Â  Â  
Â  Â  // MOCK GEOCONDING LOGIC: Determine map center based on search query
Â  Â  // In a real API call, the backend performs this geocoding. Here, we simulate the map center update.
Â  Â  const mockCoords = this.getMockCoordsForQuery(query);
Â  Â  this.mapCenter = mockCoords;

Â  Â  // Call the service which performs the external Gemini/Places API call
Â  Â  this.vets = await this.shopService.getVets(query, radius, mockCoords.lat, mockCoords.lng);
Â  Â  this.applyFilters();
Â  Â  
Â  Â  this.loading = false; 
Â  }
Â  
Â  // Helper to trigger the query search from the input field
Â  triggerSearch(): void {
Â  Â  Â  this.searchVetsByQuery(this.currentLocationQuery, this.currentRadius);
Â  }

Â  // Helper to simulate Geocoding for specific Indian cities for map centering
Â  private getMockCoordsForQuery(query: string): { lat: number, lng: number } {
Â  Â  const queryLower = query.toLowerCase();
Â  Â  
Â  Â  if (queryLower.includes('patna')) {
Â  Â  Â  Â  return { lat: 25.5941, lng: 85.1376 }; 
Â  Â  } else if (queryLower.includes('jalandhar') || queryLower.includes('phagwara') || queryLower.includes('punjab')) {
Â  Â  Â  Â  return { lat: 31.3260, lng: 75.5762 }; 
Â  Â  } else if (queryLower.includes('delhi')) {
Â  Â  Â  Â  Â return { lat: 28.7041, lng: 77.1025 }; 
Â  Â  }
Â  Â  // Default/Fallback
Â  Â  return { lat: 19.0760, lng: 72.8777 }; 
Â  }

Â  // --- Filter/Interaction Logic ---
Â  applyFilters(): void {
Â  Â  let tempVets = this.vets;

Â  Â  tempVets = tempVets.filter(v => 
Â  Â  Â  Â  (this.openNowFilter ? v.openNow : true) && 
Â  Â  Â  Â  v.rating >= this.minRating
Â  Â  );
Â  Â  
Â  Â  tempVets.sort((a, b) => a.distance - b.distance);

Â  Â  this.filteredVets = tempVets;
Â  }

Â  selectVet(vet: Vet): void {
Â  Â  this.selectedVet = vet;
Â  }
  
  viewVetDetails(vet: Vet): void {
Â  Â  Â  if (vet.website) {
Â  Â  Â  Â  Â  window.open(vet.website, '_blank');
Â  Â  Â  } else {
Â  Â  Â  Â  Â  // Using console.error instead of alert as per instructions
Â  Â  Â  Â  Â  console.error(`Vet website not available for ${vet.name}.`);
Â  Â  Â  }
Â  }
Â  
Â  recenterMap(): void {
Â  Â  Â  this.triggerSearch();
Â  }
Â  
Â  // --- Appointment Booking Methods ---
  openBookingModal(vet: Vet): void {
      if (this.pets.length === 0) {
          // In a real app, use a custom message box instead of alert
          console.error("Please add a pet to your profile before booking an appointment.");
          return;
      }
      this.selectedVet = vet;
      this.newAppointment = this.getInitialAppointmentForm();
      this.showBookingModal = true;
  }

  closeBookingModal(): void {
      this.showBookingModal = false;
      this.selectedVet = null;
  }

  submitAppointment(isValid: boolean): void {
      if (isValid && this.selectedVet) {
          console.log('Appointment confirmed:', {
              vet: this.selectedVet.name,
              ...this.newAppointment,
          });

          // Simulate confirmation without using alert()
          this.closeBookingModal();
          console.log(`Successfully booked appointment for ${this.newAppointment.petName} with ${this.selectedVet.name} on ${this.newAppointment.date}.`);
      }
  }

Â  // --- Dashboard/Sidebar Methods ---
Â  toggleSidebar(): void {
Â  Â  this.sidebarCollapsed = !this.sidebarCollapsed;
Â  }
Â  
Â  navigateTo(route: string): void {
Â  Â  if (route === 'logout') {
Â  Â  Â  this.router.navigate(['/home']);
Â  Â  Â  return;
Â  Â  }
Â  Â  this.router.navigate([`/${route}`]); 
Â  }
}
