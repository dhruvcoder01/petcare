import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ChatbotComponent } from '../../components/chatbot/chatbot.component';

import {
Â  ShopService,
Â  Pet,
Â  VaccineRecord,
Â  VaccineRecommendation
} from '../../services/shop.service'; 

// Define the interface for the modal form data
interface NewRecordForm {
Â  vaccineName: string;
Â  dateGiven: string; 
Â  nextDueDate: string; 
Â  vetName: string;
}

@Component({
Â  selector: 'app-vaccine-page',
Â  standalone: true, 
Â  // ðŸ”‘ FIX: Removed ChatbotComponent import to clear NG8113 warning.
Â  imports: [CommonModule, FormsModule, DatePipe,ChatbotComponent], 
Â  templateUrl: './vaccine-page.component.html',
Â  styleUrls: ['./vaccine-page.component.scss']
})
export class VaccinePageComponent implements OnInit {

Â  // ðŸ”‘ Add 'pets' to the type definition for navigation consistency
Â  activeSection: 'dashboard' | 'shop' | 'vaccines' | 'vets' | 'profile' | 'logout' | 'pets' = 'vaccines';
Â  
Â  // --- Sidebar & Navigation Properties ---
Â  sidebarCollapsed: boolean = false;

Â  // --- Data Properties ---
Â  pets: Pet[] = [];
Â  selectedPet: Pet | null = null;
Â  vaccineRecords: VaccineRecord[] = [];
Â  recommendations: VaccineRecommendation[] = [];

Â  // --- Modal Properties ---
Â  showAddModal: boolean = false;
Â  newRecord: NewRecordForm = this.getInitialNewRecordForm();

Â  // --- Calculated Properties (Getters for HTML) ---
Â  get overdueCount(): number {
Â  Â  return this.vaccineRecords.filter(r => this.isOverdue(r.nextDueDate)).length;
Â  }

Â  get dueSoonCount(): number {
Â  Â  const today = new Date();
Â  Â  const thirtyDaysFromNow = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);

Â  Â  return this.vaccineRecords.filter(r => {
Â  Â  Â  const dueDate = new Date(r.nextDueDate);
Â  Â  Â  return dueDate > today && dueDate <= thirtyDaysFromNow;
Â  Â  }).length;
Â  }

Â  constructor(
Â  Â  private router: Router,
Â  Â  private shopService: ShopService 
Â  ) { }

Â  ngOnInit(): void {
Â  Â  this.loadPets();
Â  }

Â  // --- Data Loading & Selection ---
Â  private loadPets(): void {
Â  Â  this.pets = this.shopService.getPets();
Â  Â  if (this.pets.length > 0) {
Â  Â  Â  const defaultPet = this.pets.find(p => p.vaccinationStatus !== 'up-to-date') || this.pets[0];
Â  Â  Â  this.selectPet(defaultPet.id);
Â  Â  }
Â  }

Â  selectPet(petId: string): void {
Â  Â  this.selectedPet = this.pets.find(p => p.id === petId) || null;
Â  Â  this.loadPetData();
Â  }

Â  private loadPetData(): void {
Â  Â  if (this.selectedPet) {
Â  Â  Â  this.vaccineRecords = this.shopService.getVaccineRecords(this.selectedPet.id);
Â  Â  Â  this.recommendations = this.shopService.getVaccineRecommendations(this.selectedPet.type);
Â  Â  } else {
Â  Â  Â  this.vaccineRecords = [];
Â  Â  Â  this.recommendations = [];
Â  Â  }
Â  }
Â  
Â  // --- Utility Methods ---
Â  isOverdue(nextDueDate: Date): boolean {
Â  Â  const dueDate = new Date(nextDueDate);
Â  Â  const today = new Date();
Â  Â  today.setHours(0, 0, 0, 0);
Â  Â  dueDate.setHours(0, 0, 0, 0);

Â  Â  return dueDate < today;
Â  }

Â  navigateTo(route: 'dashboard' | 'shop' | 'vaccines' | 'vets' | 'profile' | 'logout' | 'pets'): void {
    this.activeSection = route;

Â  Â  if (route === 'logout') {
Â  Â  Â  this.router.navigate(['/home']);
Â  Â  Â  return;
Â  Â  }
    
    if (route !== 'vaccines') {
        this.router.navigate([`/${route}`]);
    }
Â  }

Â  toggleSidebar(): void {
Â  Â  this.sidebarCollapsed = !this.sidebarCollapsed;
Â  }

Â  private formatDate(date: Date): string {
Â  Â  return date.toISOString().split('T')[0];
Â  }

Â  private getInitialNewRecordForm(): NewRecordForm {
Â  Â  const today = new Date();
Â  Â  const oneYearFromNow = new Date(today.getTime() + 365 * 24 * 60 * 60 * 1000);
Â  Â  return {
Â  Â  Â  vaccineName: '',
Â  Â  Â  dateGiven: this.formatDate(today),
Â  Â  Â  nextDueDate: this.formatDate(oneYearFromNow),
Â  Â  Â  vetName: ''
Â  Â  };
Â  }

Â  // --- Modal & Form Methods ---
Â  openAddRecordModal(): void {
Â  Â  if (this.selectedPet) {
Â  Â  Â  this.newRecord = this.getInitialNewRecordForm();
Â  Â  Â  this.showAddModal = true;
Â  Â  }
Â  }

Â  closeAddRecordModal(): void {
Â  Â  this.showAddModal = false;
Â  }

Â  saveVaccineRecord(isValid: boolean): void {
Â  Â  if (isValid && this.selectedPet) {
Â  Â  Â  const recordToSave: Omit<VaccineRecord, 'id' | 'status'> = {
Â  Â  Â  Â  petId: this.selectedPet.id,
Â  Â  Â  Â  vaccineName: this.newRecord.vaccineName,
Â  Â  Â  Â  dateGiven: new Date(this.newRecord.dateGiven),
Â  Â  Â  Â  nextDueDate: new Date(this.newRecord.nextDueDate),
Â  Â  Â  Â  vetName: this.newRecord.vetName || 'Unknown Vet/Clinic',
Â  Â  Â  };

Â  Â  Â  this.shopService.addVaccineRecord(recordToSave);
Â  Â  Â  this.loadPetData();
Â  Â  Â  this.closeAddRecordModal();
Â  Â  }
Â  }
}
